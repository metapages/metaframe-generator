{"version":3,"file":"index.4f1f587b.js","sources":["../../vite/modulepreload-polyfill","../../src/components/ButtonOptionsMenu.tsx","../../src/components/ButtonHelp.tsx","../../src/components/Random.tsx","../../src/routes/home.tsx","../../src/App.tsx","../../src/index.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { FunctionalComponent } from \"preact\";\nimport { useEffect, useState, useCallback } from \"preact/hooks\";\nimport { useHashParamJson } from \"@metapages/metaframe-hook\";\nimport {\n  Box,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerBody,\n  Grid,\n  GridItem,\n  IconButton,\n  Input,\n  Select,\n  HStack,\n  Switch,\n  Text,\n} from \"@chakra-ui/react\";\nimport { CheckIcon, CloseIcon, SettingsIcon } from \"@chakra-ui/icons\";\n\nexport type OptionType = \"string\" | \"boolean\" | \"option\" | \"number\";\n\nexport type Option = {\n  name: string;\n  displayName: string;\n  default?: string | boolean | number;\n  type?: OptionType; // defaults to string\n  options?: string[];\n  // if the type is \"option\" and there are suboptions then\n  // the suboptions are added to all options\n  suboptions?: { [name in string]: Option[] };\n  validator?: (val: string | boolean | number) => string | undefined; // undefined == 👍, string is an error message\n  map?: (val: string | boolean | number) => any; // convert value to proper type\n};\n\nconst useOptions = (options: Option[], chosenOptions?: GenericOptions) => {\n  const [optionsState, setOptionsState] = useState<Option[]>(options);\n\n  useEffect(() => {\n    let newOptions = options.concat([]);\n    options.forEach((option) => {\n      if (option.type === \"option\" && option.suboptions && chosenOptions) {\n        Object.keys(chosenOptions).forEach((key) => {\n          const val = chosenOptions[key] as string | undefined;\n          if (val && option?.suboptions?.[val]) {\n            newOptions = newOptions.concat(option.suboptions[val]);\n          }\n        });\n      }\n    });\n\n    setOptionsState(newOptions);\n  }, [chosenOptions, setOptionsState, options]);\n\n  return [optionsState];\n};\n\nexport const ButtonOptionsMenu: FunctionalComponent<{ options: Option[] }> = ({\n  options,\n}) => {\n  const [open, setOpen] = useState<boolean>(false);\n\n  const onClick = useCallback(() => {\n    setOpen(!open);\n  }, [open]);\n\n  return (\n    <>\n      <IconButton\n        verticalAlign=\"top\"\n        aria-label=\"Metaframe settings\"\n        // @ts-ignore\n        icon={<SettingsIcon />}\n        size=\"lg\"\n        onClick={onClick}\n      />\n      <OptionsMenu isOpen={open} setOpen={setOpen} options={options} />\n    </>\n  );\n};\n\nexport type GenericOptions = Record<string, string | boolean | number | undefined>;\n\nconst OptionsMenu: FunctionalComponent<{\n  isOpen: boolean;\n  setOpen: (open: boolean) => void;\n  options: Option[];\n}> = ({ isOpen, setOpen, options }) => {\n  // isOpen = true; // for debugging/developing\n\n  const [optionsInHashParams, setOptionsInHashParams] =\n    useHashParamJson<GenericOptions>(\n      \"options\",\n      Object.fromEntries(\n        options\n          .filter((o) => o.default)\n          .map((option) => [option!.name!, option!.default!])\n      )\n    );\n\n  const [localOptions, setLocalOptions] = useState<GenericOptions>(\n    optionsInHashParams || {}\n  );\n\n  const [filteredOptions] = useOptions(options, localOptions);\n\n  const [errors, setErrors] = useState<Record<string, string> | undefined>(\n    undefined\n  );\n\n  const handleOnChange = useCallback(\n    (event: any) => {\n      const { name, value } = event.target as HTMLInputElement;\n      let flattenedOptions = options.concat([]);\n      options.forEach((o) => {\n        if (o.suboptions) {\n          const arrays = Object.values(o.suboptions);\n          arrays.forEach(\n            (oo) => (flattenedOptions = flattenedOptions.concat(oo))\n          );\n        }\n      });\n\n      const option = flattenedOptions.find((o) => o.name === name) as Option; // assume we always find one since we configured it from options\n      // save boolean true as \"1\"\n      if (!option) {\n        console.error(`No option found for name=${name}`);\n        return;\n      }\n      if (option.type === \"boolean\") {\n        setLocalOptions({ ...localOptions, [name]: value === \"1\" });\n      } else if (option.type === \"number\") {\n        setLocalOptions({ ...localOptions, [name]: value !== undefined && value !== \"\" ? parseFloat(value) : undefined });\n      } else {\n        setLocalOptions({ ...localOptions, [name]: value });\n      }\n    },\n    [localOptions, setLocalOptions, options]\n  );\n\n  const onClose = useCallback(() => {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n\n  const onCloseAndAccept = useCallback(() => {\n    // first validate if available\n    const maybeErrors: Record<string, string> = {};\n    Object.keys(localOptions).forEach((key) => {\n      const option: Option | undefined = options.find((o) => o.name === key);\n      if (option && option.validator && option.type !== \"boolean\") {\n        const errorFromOption = option.validator(localOptions[key] as string);\n        if (errorFromOption) {\n          maybeErrors[key] = errorFromOption;\n        }\n      }\n    });\n    if (Object.keys(maybeErrors).length > 0) {\n      setErrors(maybeErrors);\n      return;\n    }\n    setErrors(undefined);\n\n    // assume valid!\n    // now maybe map to other values\n    const convertedOptions: GenericOptions = {};\n    Object.keys(localOptions).forEach((key) => {\n      const option: Option | undefined = filteredOptions.find(\n        (o) => o.name === key\n      );\n      if (localOptions[key] === undefined) {\n        return;\n      }\n      if (option !== undefined) {\n        if (option.map) {\n          // user supplied mapping function from hash param value to user converted value\n          convertedOptions[key] = option.map(localOptions[key]!);\n        } else {\n          if (option.type === \"boolean\") {\n            convertedOptions[key] =\n              localOptions[key] === true ||\n              localOptions[key] === \"1\" ||\n              localOptions[key] === \"true\";\n          } else if (option.type === \"number\") {\n            convertedOptions[key] = typeof(localOptions[key]) === \"string\" ? parseFloat(localOptions[key] as string) : localOptions[key];\n          }{\n            convertedOptions[key] = localOptions[key];\n          }\n        }\n      } else {\n        convertedOptions[key] = localOptions[key];\n      }\n    });\n\n    setOpen(!isOpen);\n    setOptionsInHashParams(convertedOptions);\n  }, [\n    setOpen,\n    isOpen,\n    options,\n    localOptions,\n    filteredOptions,\n    setOptionsInHashParams,\n    setErrors,\n  ]);\n\n  // preact complains in dev mode if this is moved out of a functional component\n  useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n    const onKeyup = (e: KeyboardEvent) => {\n      if (e.key === \"Enter\" && isOpen) onCloseAndAccept();\n    };\n    window.addEventListener(\"keyup\", onKeyup);\n    return () => {\n      window.removeEventListener(\"keyup\", onKeyup);\n    };\n  }, [onCloseAndAccept, isOpen]);\n\n  return (\n    <Drawer placement=\"top\" onClose={onCloseAndAccept} isOpen={isOpen}>\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"0px\">\n            Configure metaframe (stored in URL hash params )\n          </DrawerHeader>\n          <DrawerBody>\n            <Box\n              maxW=\"80%\"\n              p={2}\n              borderWidth=\"4px\"\n              borderRadius=\"lg\"\n              overflow=\"hidden\"\n            >\n              <Grid templateColumns=\"repeat(12, 1fr)\" gap={6}>\n                {filteredOptions.map((option) => (\n                  <>\n                    <GridItem rowSpan={1} colSpan={4}>\n                      <Box\n                        w=\"100%\"\n                        h=\"100%\"\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        justifyContent=\"flex-end\"\n                      >\n                        <Text textAlign={\"right\"} verticalAlign=\"bottom\">\n                          {option.displayName || option.name}:\n                        </Text>\n                      </Box>\n                    </GridItem>\n                    <GridItem rowSpan={1} colSpan={8}>\n                      {\" \"}\n                      {renderInput(\n                        option,\n                        localOptions[option.name],\n                        handleOnChange\n                      )}\n                    </GridItem>\n                  </>\n                ))}\n\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={12}></GridItem>\n                <GridItem rowSpan={1} colSpan={10}></GridItem>\n\n                <GridItem rowSpan={0} colSpan={2}>\n                  <HStack spacing={2} justify=\"flex-end\" direction=\"row\">\n                    {/*\n                      // @ts-ignore */}\n                    <IconButton\n                      size=\"lg\"\n                      color=\"red\"\n                      icon={(<CloseIcon />) as any}\n                      onClick={onClose}\n                    />\n\n                    {/*\n                      // @ts-ignore */}\n                    <IconButton\n                      size=\"lg\"\n                      color=\"green\"\n                      icon={(<CheckIcon />) as any}\n                      onClick={onCloseAndAccept}\n                    />\n                  </HStack>\n                </GridItem>\n              </Grid>\n            </Box>\n          </DrawerBody>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n};\n\nconst renderInput = (option: Option, value: any, onChange: any) => {\n  switch (option.type) {\n    case \"option\":\n      return (\n        <Select\n          name={option.name}\n          value={value}\n          onChange={onChange}\n          placeholder=\"Select option\"\n        >\n          {option.options!.map((optionChoice) => (\n            <option value={optionChoice}>{optionChoice}</option>\n          ))}\n        </Select>\n      );\n    case \"boolean\":\n      return (\n        <Switch\n          name={option.name}\n          // @ts-ignore\n          rightIcon={<CheckIcon />}\n          onChange={onChange}\n          isChecked={value === true || value === \"1\"}\n          value={value ? 0 : 1}\n        />\n      );\n    default:\n      return (\n        <Box w=\"100%\" h=\"10\">\n          <Input\n            name={option.name}\n            type=\"text\"\n            placeholder=\"\"\n            value={value}\n            onInput={onChange}\n          />\n        </Box>\n      );\n  }\n};\n","import { FunctionalComponent } from \"preact\";\nimport { useCallback, useState } from \"preact/hooks\";\nimport {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerBody,\n  IconButton,\n  DrawerCloseButton,\n} from \"@chakra-ui/react\";\nimport { isIframe } from \"@metapages/metaframe-hook\";\nimport { QuestionIcon } from \"@chakra-ui/icons\";\n\nexport const ButtonHelp: FunctionalComponent<{ url?: string }> = ({ url }) => {\n  // const [open, setOpen] = useState<boolean>(isIframe() ? false : true);\n  const [open, setOpen] = useState<boolean>(false);\n\n  url = url\n    ? url\n    : `${window.location.origin}${window.location.pathname}/README.md`;\n\n  const onClick = useCallback(() => {\n    setOpen(!open);\n  }, [open]);\n\n  return (\n    <>\n      <IconButton\n        verticalAlign=\"top\"\n        aria-label=\"Help\"\n        // @ts-ignore\n        icon={<QuestionIcon />}\n        size=\"lg\"\n        onClick={onClick}\n        mr=\"4\"\n      />\n      <HelpPanel url={url} isOpen={open} setOpen={setOpen} />\n    </>\n  );\n};\n\nconst HelpPanel: FunctionalComponent<{\n  url: string;\n  isOpen: boolean;\n  setOpen: (open: boolean) => void;\n}> = ({ isOpen, setOpen, url }) => {\n  const onClose = useCallback(() => {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n\n  const onOverlayClick = useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const iframeUrl = `https://metapages.github.io/metaframe-markdown/#?url=${url}`;\n\n  return (\n    <Drawer\n      size=\"full\"\n      placement=\"top\"\n      onClose={onClose}\n      isOpen={isOpen}\n      onOverlayClick={onOverlayClick}\n    >\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerCloseButton size=\"lg\" bg=\"gray.100\" />\n          <DrawerBody>\n            <iframe width=\"100%\" height=\"100%\" src={iframeUrl} />\n          </DrawerBody>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n};\n","import { FunctionalComponent } from \"preact\";\nimport { useEffect, useState } from \"preact/hooks\";\nimport { Box, Flex, Heading, Spacer, Text } from \"@chakra-ui/react\";\nimport random from \"random\";\nimport { ButtonHelp } from \"./ButtonHelp\";\nimport { Option } from \"/@/components/ButtonOptionsMenu\";\nimport { useHashParamJson, useMetaframe } from \"@metapages/metaframe-hook\";\n\ntype Distributions = \"uniform\" | \"uniformInt\" | \"normal\" | \"sin\";\n\nexport const options: Option[] = [\n  {\n    name: \"frequency\",\n    displayName: \"Frequency (per second)\",\n    default: 1,\n    type: \"number\",\n  },\n  {\n    name: \"distribution\",\n    displayName: \"Distribution\",\n    default: \"uniform\",\n    type: \"option\",\n    options: [\"uniform\", \"uniformInt\", \"normal\", \"sin\"],\n    suboptions: {\n      uniform: [\n        {\n          name: \"min\",\n          displayName: \"Min\",\n          default: 0,\n          type: \"number\",\n        },\n        {\n          name: \"max\",\n          displayName: \"Max\",\n          default: 1,\n          type: \"number\",\n        },\n      ],\n      uniformInt: [\n        {\n          name: \"min\",\n          displayName: \"Min\",\n          default: 0,\n          type: \"number\",\n        },\n        {\n          name: \"max\",\n          displayName: \"Max\",\n          default: 10,\n          type: \"number\",\n        },\n      ],\n      uniformBoolean: [],\n      normal: [\n        {\n          name: \"mu\",\n          displayName: \"mu\",\n          default: 0,\n          type: \"number\",\n        },\n        {\n          name: \"sigma\",\n          displayName: \"sigma\",\n          default: 1,\n          type: \"number\",\n        },\n      ],\n      sin: [\n        {\n          name: \"increment\",\n          displayName: \"increment\",\n          default: 0.01,\n          type: \"number\",\n        },\n      ],\n    },\n  },\n];\n\nexport const Random: FunctionalComponent = () => {\n  const metaframe = useMetaframe();\n  const [optionsInHashParams] =\n    useHashParamJson<{ [name in string]: string | boolean | number }>(\n      \"options\"\n    );\n  const [rand, setRand] = useState<{ f: number; rand: () => number }>({\n    f: 1,\n    rand: random.uniform(0, 1),\n  });\n  const [value, setValue] = useState<number>(0);\n\n  useEffect(() => {\n    if (!optionsInHashParams) {\n      return;\n    }\n    let dist: Distributions = \"uniform\";\n    const min: number =\n      optionsInHashParams[\"min\"] !== undefined\n        ? (optionsInHashParams[\"min\"] as number)\n        : 0;\n    const max: number =\n      optionsInHashParams[\"max\"] !== undefined\n        ? (optionsInHashParams[\"max\"] as number)\n        : 1;\n    const mu: number =\n      optionsInHashParams[\"mu\"] !== undefined\n        ? (optionsInHashParams[\"mu\"] as number)\n        : 0;\n    const sigma: number =\n      optionsInHashParams[\"sigma\"] !== undefined\n        ? (optionsInHashParams[\"sigma\"] as number)\n        : 1;\n    const increment: number =\n      optionsInHashParams[\"increment\"] !== undefined\n        ? (optionsInHashParams[\"increment\"] as number)\n        : 0.01;\n\n    const f: number =\n      optionsInHashParams[\"frequency\"] !== undefined\n        ? (optionsInHashParams[\"frequency\"] as number)\n        : 1;\n\n    if (optionsInHashParams[\"distribution\"]) {\n      dist = optionsInHashParams[\"distribution\"] as Distributions;\n    }\n\n    switch (dist) {\n      case \"uniform\":\n        setRand({ f, rand: random.uniform(min, max) });\n        break;\n      case \"uniformInt\":\n        setRand({ f, rand: random.uniformInt(Math.floor(min), Math.floor(max)) });\n        break;\n      case \"normal\":\n        setRand({ f, rand: random.normal(mu, sigma) });\n        break;\n      case \"sin\":\n        let current :number = 0.01;\n        setRand({ f, rand: () => {\n          current += increment;\n          return Math.sin(current);\n         }});\n        break;\n    }\n  }, [optionsInHashParams]);\n\n  useEffect(() => {\n    if (!metaframe) {\n      return;\n    }\n\n    const handle = setInterval(() => {\n      const val = rand.rand();\n      metaframe.metaframe?.setOutput(\"v\", val);\n      setValue(val);\n    }, 1000 / rand.f);\n\n    return () => {\n      clearInterval(handle);\n    };\n  }, [metaframe, rand]);\n\n  return <div>{value}</div>;\n};\n","import { FunctionalComponent } from \"preact\";\nimport { Flex, Heading, SimpleGrid, Spacer, Stack } from \"@chakra-ui/react\";\nimport { Header } from \"/@/components/Header\";\nimport { Option } from \"/@/components/ButtonOptionsMenu\";\nimport { ButtonOptionsMenu } from \"/@/components/ButtonOptionsMenu\";\nimport { ButtonHelp } from '../components/ButtonHelp';\nimport { Random, options } from '../components/Random';\n\nexport const Home: FunctionalComponent = () => (\n\n\n<Flex>\n  <Flex flexDirection=\"column\">\n    <Random/>\n  </Flex>\n  <Spacer />\n  <ButtonHelp />\n  <ButtonOptionsMenu options={options} />\n</Flex>\n\n);\n","import { FunctionalComponent } from \"preact\";\nimport { Home } from \"./routes/home\";\n\nexport const App: FunctionalComponent = () => {\n  return <Home />;\n};\n","import { render } from \"preact\";\nimport { WithMetaframe } from \"@metapages/metaframe-hook\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { App } from \"./App\";\n\nrender(\n  <ChakraProvider>\n    <WithMetaframe>\n      <App />\n    </WithMetaframe>\n  </ChakraProvider>,\n  document.getElementById(\"root\")!\n);\n"],"names":["useState","useCallback","DrawerOverlay","DrawerHeader","DrawerBody","DrawerCloseButton","render"],"mappings":"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"}